// -*- C++ -*-
//
// Package:    SSBAnalyzer
// Class:      SSBAnalyzer
// 
/**\class SSBAnalyzer SSBAnalyzer.cc CMSAnalyses/SSBAnalyzer/plugins/SSBAnalyzer.cc

 Description: [one line class summary]

 Implementation:
     [Notes on implementation]
*/
//
// Original Author:  Sungwoong Cho, Seungkyu Ha, Sehwook Lee, Suyoung Choi, Jaehoon Lim, Dooyeon Gyun, 588 R-004, +41227678602
//         Created:  Mon Jun  2 11:21:34 CEST 2014
// $Id$
//
//


// system include files
#include <memory>
#include "CMSAnalyses/SSBAnalyzer/plugins/SSBAnalyzer.h"

using namespace std;
using namespace reco;
using namespace isodeposit;
using namespace pat;
//
// constants, enums and typedefs
//

//
// static data member definitions
//
//
// constructors and destructor
//
SSBAnalyzer::SSBAnalyzer(const edm::ParameterSet& iConfig)
:
/*// needed for PDF 
pdfTag( iConfig.getParameter<edm::InputTag>("PDFInfoTag") ),
pdfSets( iConfig.getParameter<std::vector<std::string>>("PDFSetNames") ),
pdfCent( iConfig.getParameter<bool>("PDFCent") ),
pdfSys( iConfig.getParameter<bool>("PDFSys") ),


// for EventFilter 
PFCandidatesTag( iConfig.getParameter<edm::InputTag>("PFCandidates") ), 
ptMinTag( iConfig.getParameter<double>("ptMin") ),
maxPTDiffTag(iConfig.getParameter<double>("maxPTDiff") ),
eOverPMaxTag(iConfig.getParameter<double>("eOverPMax") ),*/

// needed for Vertex
//vertexTag( iConfig.getParameter<edm::InputTag>("pvTag") ),
vtxToken_(consumes<reco::VertexCollection>(iConfig.getParameter<edm::InputTag>("pvTag"))),
rhoTag( iConfig.getParameter<edm::InputTag>("RhoTag") ),
//pileupTag( iConfig.getParameter<edm::InputTag>("puTag") ),

// needed for Trigger 
triggerList( iConfig.getParameter<std::vector<std::string>>("trigList") ),
triggerBits_(consumes<edm::TriggerResults>(iConfig.getParameter<edm::InputTag>("bits"))),
triggerPrescales_(consumes<pat::PackedTriggerPrescales>(iConfig.getParameter<edm::InputTag>("prescales"))),

// needed for Muon
//muonTag( iConfig.getParameter<edm::InputTag>("muTag") )
muonToken_(consumes<pat::MuonCollection>(iConfig.getParameter<edm::InputTag>("muTag"))),

// needed for Electron
elecmvaIdNoTrTag( iConfig.getParameter<edm::InputTag>("emvaIdNoTrTag") ), 
elecmvaIdTrNoIPTag( iConfig.getParameter<edm::InputTag>("emvaIdTrNoIPTag") ),
elecmvaIdTrTag( iConfig.getParameter<edm::InputTag>("emvaIdTrTag") ),
beamSpotInputTag( iConfig.getParameter<edm::InputTag>("bstag") ),
conversionsInputTag( iConfig.getParameter<edm::InputTag>("convertag") ),
electronToken_(iConfig.getParameter<edm::InputTag>("eleTag")),

// needed for Electron ID
eleVetoIdMapToken_(consumes<edm::ValueMap<bool> >(iConfig.getParameter<edm::InputTag>("eleVetoIdMap"))),
eleLooseIdMapToken_(consumes<edm::ValueMap<bool> >(iConfig.getParameter<edm::InputTag>("eleLooseIdMap"))),
eleMediumIdMapToken_(consumes<edm::ValueMap<bool> >(iConfig.getParameter<edm::InputTag>("eleMediumIdMap"))),
eleTightIdMapToken_(consumes<edm::ValueMap<bool> >(iConfig.getParameter<edm::InputTag>("eleTightIdMap"))),
eleHEEPIdMapToken_(consumes<edm::ValueMap<bool> >(iConfig.getParameter<edm::InputTag>("eleHEEPIdMap"))),

// needed for Jet
jetToken_(consumes<pat::JetCollection>(iConfig.getParameter<edm::InputTag>("jtTag"))),
pfLooseJetIDparam( iConfig.getParameter<edm::ParameterSet> ("PFLooseJetID") ),
pfTightJetIDparam( iConfig.getParameter<edm::ParameterSet> ("PFTightJetID") ),
csvBJetTag( iConfig.getParameter<std::string>("csvbjetTag") ),
metToken_(consumes<pat::METCollection>(iConfig.getParameter<edm::InputTag>("metTag")))
{
   //now do what ever initialization is needed
   ssbgeninfor = new SSBGenInfor(iConfig);
}


SSBAnalyzer::~SSBAnalyzer()
{
 
   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)

}


//
// member functions
//

// ------------ method called for each event  ------------
void
SSBAnalyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
{
   using namespace edm;

   Event = -999;
   Run = -999;
   Lumi = -999;
   isData = false;

   /// Initailizing variable 
   ssbtreeManager->InitializeVariables(); 


   Event = iEvent.id().event();
   Run = iEvent.id().run();
   Lumi = iEvent.id().luminosityBlock();
   isData = iEvent.isRealData();

   ssbtreeManager->Fill( "Info_EventNumber", Event  );
   ssbtreeManager->Fill( "Info_RunNumber"  , Run    ); 
   ssbtreeManager->Fill( "Info_Luminosity" , Lumi   ); 
   ssbtreeManager->Fill( "Info_isData"     , isData ); 

   /////////////////////////////////
   /// Only For MC Samples!!!!!! ///
   /////////////////////////////////

   if (!isData)
   {
/*
       ///////////////////////
       /// PDF Information ///
       ///////////////////////

      Handle<GenEventInfoProduct> pdfstuff;
      iEvent.getByLabel(pdfTag, pdfstuff);

      if (pdfCent)
      {
         pdfWeight->SetScalePDF(pdfstuff->pdf()->scalePDF);
         pdfWeight->SetIncomingPartion1(pdfstuff->pdf()->id.first, pdfstuff->pdf()->x.first, pdfstuff->pdf()->xPDF.first);
         pdfWeight->SetIncomingPartion2(pdfstuff->pdf()->id.second, pdfstuff->pdf()->x.second, pdfstuff->pdf()->xPDF.second);
         pdfWeight->SetPDFSet(1);
         double _pdf1 = pdfWeight->getCentralPDFWeight(1);
         double _pdf2 = pdfWeight->getCentralPDFWeight(2);
         double _nominal = _pdf1*_pdf2;
         pdfWeight->SetNominalWeight(_nominal);

         ssbtreeManager->Fill( "PDFWeight_Id1"       , pdfstuff->pdf()->id.first  );
         ssbtreeManager->Fill( "PDFWeight_Id2"       , pdfstuff->pdf()->id.second );
         ssbtreeManager->Fill( "PDFWeight_BjorkenX1" , pdfstuff->pdf()->x.first   );
         ssbtreeManager->Fill( "PDFWeight_BjorkenX2" , pdfstuff->pdf()->x.second  );
         ssbtreeManager->Fill( "PDFWeight_Q"         , pdfstuff->pdf()->scalePDF  );
         ssbtreeManager->Fill( "PDFWeight_PDF1"      , _pdf1                      );
         ssbtreeManager->Fill( "PDFWeight_PDF2"      , _pdf2                      );
      }
      if (pdfSys)
      {
         pdfWeight->getSys("Up");
         pdfWeight->getSys("Down");

         ssbtreeManager->Fill( "PDFWeight_Up"   , pdfWeight->getSys("Up")   );
         ssbtreeManager->Fill( "PDFWeight_Down" , pdfWeight->getSys("Down") );
      }
*/
      ///////////////////////////////////////////
      /// Generator Level Particle Informaton ///
      ///////////////////////////////////////////
      
      ssbgeninfor->GenPar(iEvent, ssbtreeManager);
      ssbgeninfor->GenJet(iEvent, ssbtreeManager);
      ssbgeninfor->GenMET(iEvent, ssbtreeManager);

   }/// isDATA ///


/*
   /////////////////////////////////////////
   /// inconsistentMuonPFCandidateFilter ///
   /////////////////////////////////////////

   incons_mu_pt_flt_ = false;
   pfreco_mu_flt_ = false;
   int foMu = 0;
   int pfremu =0;
  
   Handle<PFCandColl> pfCandidates;
   iEvent.getByLabel(PFCandidatesTag,pfCandidates);
   for ( unsigned i=0; i<pfCandidates->size(); i++ )
   {
      const reco::PFCandidate & cand = (*pfCandidates)[i];
      if ( cand.particleId() != reco::PFCandidate::mu ){continue;}

      const reco::MuonRef muon = cand.muonRef();
      if ( fabs( muon->pt() - cand.pt() ) > 100 ) {pfremu++;}

      if ( cand.pt() < ptMinTag ){continue;}

      if (  muon->isTrackerMuon()
         && muon->isGlobalMuon()
         && fabs(muon->innerTrack()->pt()/muon->globalTrack()->pt() - 1) > maxPTDiffTag){ foMu++; }
   }
   if (foMu == 0){
      incons_mu_pt_flt_ = true;
   }
   if (pfremu == 0 ){ 
      pfreco_mu_flt_ = true; 
   }

   ssbtreeManager->Fill( "Filter_Inconsistent_MuonPt", incons_mu_pt_flt_ ); 
   ssbtreeManager->Fill( "Filter_PFReco_Muon", pfreco_mu_flt_);  

   //////////////////////////
   /// Greedy Muon Filter ///
   //////////////////////////
         
   greedy_mu_flt_ = false;
   int grMu = 0;
   for( unsigned i=0; i<pfCandidates->size(); i++ )
   {

      const reco::PFCandidate & cand = (*pfCandidates)[i];

//    if( cand.particleId() != 3 ) // not a muon
      if( cand.particleId() != reco::PFCandidate::mu ) {continue;}// not a muon
      if(!PFMuonAlgo::isIsolatedMuon( cand.muonRef() ) ) {continue;} // muon is not isolated

       double totalCaloEnergy = cand.rawEcalEnergy() +  cand.rawHcalEnergy();
       double eOverP = totalCaloEnergy/cand.p();

       if( eOverP >= eOverPMaxTag ) { grMu++; }

    }

    if (grMu == 0) 
    {  
       greedy_mu_flt_ = true;
    }
    ssbtreeManager->Fill( "Filter_Greedy_Muon" ,greedy_mu_flt_);
*/
                                            
   ///////////////////////////////////
   // Primary Vertices Information ///
   ///////////////////////////////////

   vtx_x_ = -9999.0;
   vtx_y_ = -9999.0;
   vtx_z_ = -9999.0;
   vtx_x_e = -9999.0;
   vtx_y_e = -9999.0;
   vtx_z_e = -9999.0;

   int numpvidx =0;
   std::vector<double> v_sumPtSquare;
   v_sumPtSquare.clear();
   std::vector<reco::Vertex> v_vertex;
   v_vertex.clear();

   Handle<reco::VertexCollection> vertices;
   iEvent.getByToken(vtxToken_, vertices);

   for ( const reco::Vertex &itPV : *vertices)
   {
      PV_Filter_ = false;

      if ( !itPV.isFake() && itPV.ndof() > 4.0 && itPV.position().Rho() < 2. && abs(itPV.z()) < 24. )
      {
         PV_Filter_ = true;
         ssbtreeManager->Fill( "Filter_PV" , PV_Filter_ );

      }
      else 
      {  
         ssbtreeManager->Fill( "Filter_PV" , PV_Filter_ );
      }

      v_vertex.push_back(itPV);

      vtx_x_  = itPV.x(); 
      vtx_y_  = itPV.y();
      vtx_z_  = itPV.z();
      vtx_x_e = itPV.xError();
      vtx_y_e = itPV.yError();
      vtx_z_e = itPV.zError();

      ssbtreeManager->Fill( "Vertex_X", vtx_x_ );
      ssbtreeManager->Fill( "Vertex_Y", vtx_y_ );
      ssbtreeManager->Fill( "Vertex_Z", vtx_z_ );
      ssbtreeManager->Fill( "Vertex_X_Error", vtx_x_e );
      ssbtreeManager->Fill( "Vertex_Y_Error", vtx_y_e );
      ssbtreeManager->Fill( "Vertex_Z_Error", vtx_z_e );

      numpvidx++;
   }
   ssbtreeManager->Fill( "PV_Count", numpvidx );


/*
   for (unsigned int i=0; i < v_sumPtSquare.size(); i++)
   {


   }
*/

   /////////////////////////
   ///  Rho Information  ///
   /////////////////////////

   Handle<double> rhoHandle;
   iEvent.getByLabel(rhoTag, rhoHandle);
   
   if(rhoHandle.isValid()) 
   {
      rho = *(rhoHandle.product());
   } else {
      cout << "Rho is invalid!!!" << endl;

   }

   //////////////////////////
   /// Pileup Information ///
   //////////////////////////

   NPU = -1;
   NPUin = 0;
   BX = -999;
/*   if (!isData)
   { 

       Handle<PileUpCollection> pileup;
       iEvent.getByLabel( pileupTag, pileup ); 
       for (PileUpCollection::const_iterator itpu = pileup->begin() ; itpu != pileup->end(); itpu++)
       {
           BX = (*itpu).getBunchCrossing();
           if (BX == 0){
           NPU = (*itpu).getTrueNumInteractions();
           NPUin += (*itpu).getPU_NumInteractions();
           ssbtreeManager->Fill( "PileUp_Count_Intime"     , NPU  ); 
           ssbtreeManager->Fill( "PileUp_Count_Interaction", NPUin); 
           }
       }

   }*/


   /////////////////////////
   ///Trigger Information///
   /////////////////////////

   edm::Handle<edm::TriggerResults> triggerBits;                                                                                        
   iEvent.getByToken(triggerBits_, triggerBits);                                                                                        
   
   edm::Handle<pat::PackedTriggerPrescales> triggerPrescales;                                                                           
   iEvent.getByToken(triggerPrescales_, triggerPrescales);                                                                              
   
   const edm::TriggerNames &names = iEvent.triggerNames(*triggerBits);                                                                  
   for (unsigned int i = 0, n = triggerBits->size(); i < n; ++i)                                                                        
   {                                                                                                                                    
//      cout << "Trigger : " << names.triggerName(i) << endl;
      for (unsigned int j =0; j < triggerList.size() ;j++)                                                                              
      {                                                                                                                                 
         
         trigPass_ = false;
         trigError_ = false;                                                                                                            
         trigRun_ =false;
         unsigned int trigPreScale_ = 0;
         if (TString(names.triggerName(i)).Contains(triggerList.at(j)) )                                                                
         {  
            trigPass_ = triggerBits->accept(i);                                                                                         
            trigError_ = triggerBits->error(i);                                                                                         
            trigRun_ = triggerBits->wasrun(i) ;
            trigPreScale_ = triggerPrescales->getPrescaleForIndex(i);                                                                   
            
            ssbtreeManager->Fill( "Trigger_Name"    , names.triggerName(i) );
            ssbtreeManager->Fill( "Trigger_isPass"  , trigPass_            );
            ssbtreeManager->Fill( "Trigger_PreScale", trigPreScale_        );
            ssbtreeManager->Fill( "Trigger_isError" , trigError_           );
            ssbtreeManager->Fill( "Trigger_isRun"   , trigRun_             ); 
         }                                                                                                                              
      
      } // j                                                                                                                            
     
   } // i  

   /////////////////////////
   /// Muon Information ////
   /////////////////////////

   Handle<pat::MuonCollection> muons;
   iEvent.getByToken(muonToken_, muons);

   muon_index=0; 

   for (const pat::Muon &muon : *muons)
   {

      isLoose = false;
      isSoft = false;
      isTight = false;
      isHighPt = false;

      isLoose = muon.isLooseMuon() ;
      isSoft =  muon.isSoftMuon( v_vertex[0] );
      isTight = muon.isTightMuon( v_vertex[0] );
      isHighPt = muon.isHighPtMuon( v_vertex[0] );

      //cout << "03 " << muon.pfIsolationR03().sumChargedHadronPt << "   " << muon.pfIsolationR03().sumNeutralHadronEt << "   " 
      //<< muon.pfIsolationR03().sumPhotonEt << "   " << muon.pfIsolationR03().sumPUPt << endl;

      relIso03 = isolation->MuonRelTrkIso( muon.isolationR03().sumPt, muon.pt() );

      PFIsodbeta03 = isolation->PFIsodBeta( muon.pfIsolationR03().sumChargedHadronPt, muon.pfIsolationR03().sumNeutralHadronEt, 
                                                muon.pfIsolationR03().sumPhotonEt, muon.pfIsolationR03().sumPUPt, muon.pt() ,0.5);

      PFIsodbeta04 = isolation->PFIsodBeta( muon.pfIsolationR04().sumChargedHadronPt, muon.pfIsolationR04().sumNeutralHadronEt, 
                                                muon.pfIsolationR04().sumPhotonEt, muon.pfIsolationR04().sumPUPt, muon.pt() ,0.5);

      //cout << "04 " << muon.pfIsolationR04().sumChargedHadronPt << "   " << muon.pfIsolationR04().sumNeutralHadronEt << "   " 
      //     << muon.pfIsolationR04().sumPhotonEt << "   " << muon.pfIsolationR04().sumPUPt << endl;

      ssbtreeManager->Fill( "Muon", muon.pt(), muon.eta(), muon.phi(), muon.energy(), muon_index);
      ssbtreeManager->Fill( "Muon_isLoose"     , isLoose          );
      ssbtreeManager->Fill( "Muon_isSoft"      , isSoft           );
      ssbtreeManager->Fill( "Muon_isTight"     , isTight          );
      ssbtreeManager->Fill( "Muon_isHighPt"    , isHighPt         );
      ssbtreeManager->Fill( "Muon_relIso03"    , relIso03         );
      ssbtreeManager->Fill( "Muon_PFIsodBeta03", PFIsodbeta03     );
      ssbtreeManager->Fill( "Muon_PFIsodBeta04", PFIsodbeta04     );
      ssbtreeManager->Fill( "Muon_pdgId"       , muon.pdgId()     );
      ssbtreeManager->Fill( "Muon_Charge"      , muon.charge()    );

      muon_index++;

   }
   ssbtreeManager->Fill( "Muon_Count", muon_index );
 

   ////////////////////////////
   /////// Electron infor//////
   ////////////////////////////
   ele_index=0;

//   Handle<pat::ElectronCollection> elecs;
   Handle<ElectronCollection> elecs;
//   iEvent.getByToken(electronToken_, elecs);
   iEvent.getByLabel(electronToken_, elecs);

   edm::Handle < reco::BeamSpot > bsHandle;
   iEvent.getByLabel(beamSpotInputTag, bsHandle);

   Handle<ConversionCollection> hConversions;
   iEvent.getByLabel(conversionsInputTag, hConversions);

   edm::Handle<edm::ValueMap<bool> > veto_id_decisions;  // Veto ID Value Map ...
   iEvent.getByToken(eleVetoIdMapToken_ ,veto_id_decisions);

   edm::Handle<edm::ValueMap<bool> > loose_id_decisions;  // Loose ID Value Map ...
   iEvent.getByToken(eleLooseIdMapToken_ ,loose_id_decisions);

   edm::Handle<edm::ValueMap<bool> > medium_id_decisions;  // Medium ID Value Map ...
   iEvent.getByToken(eleMediumIdMapToken_,medium_id_decisions);

   edm::Handle<edm::ValueMap<bool> > tight_id_decisions; // Tight ID Value Map ...
   iEvent.getByToken(eleTightIdMapToken_,tight_id_decisions);

   edm::Handle<edm::ValueMap<bool> > heep_id_decisions; // HEEP ID Value Map ...
   iEvent.getByToken(eleHEEPIdMapToken_ ,heep_id_decisions);


//   for ( const pat::Electron & itEle : *elecs )
   for(ElectronCollection::const_iterator itEle = elecs->begin(); itEle != elecs->end(); ++itEle)
   {
      const Ptr<pat::Electron> itElePtr(elecs, itEle - elecs->begin() );

      eles_pt_ = -9999.0;
      eles_eta_ = -9999.0;
      eles_phi_ = -9999.0;
      eles_energy_ = -9999.0;
      superclustereta_ = -999.0;

      elecs_relIso03_ = -999.0;
      elecs_relIso04_ = -999.0;
      elecs_PFIsodbeta03_ = -999.0;
      elecs_PFIsodbeta04_ = -999.0;
      elecs_PFIsoRho03_ = -999.0;
      elecs_PFIsoRho04_ = -999.0;

      PfCharHadIso03_   = -999.0;
      PfPUCharHadIso03_ = -999.0;
      PfNeuHadIso03_    = -999.0;
      PfGamIso03_       = -999.0;
      PfCharHadIso04_   = -999.0;
      PfPUCharHadIso04_ = -999.0;
      PfNeuHadIso04_    = -999.0;
      PfGamIso04_       = -999.0;

      elecs_IsoWrong_ = false;

      eles_SCB_Loose_  = false;
      eles_SCB_Medium_ = false;
      eles_SCB_Tight_  = false;
      eles_SCB_Veto_   = false;

      eles_pdgid_ = 0;
      eles_charge_ = -999;
      eles_chargeid_gsfctfpx_ = false;
      eles_chargeid_gsfpx_ = false;
      eles_chargeid_gsfctf_ = false;
      eles_gsfchar_ = -999;
      eles_ctfchar_ = -999;
      eles_spchar_ = -999;

      gsftrack_dxy_ = -999.0;
      gsftrack_dz_ = -999.0;
      ctftrack_dxy_ = -999.0;
      ctftrack_dz_ = -999.0; 

      mva1_ = -999.0;
      mva2_ = -999.0;
      mva3_ = -999.0;

      nmhit_ = 999;
      matchesConv = false;
      passconversionveto = false;
      passconversionveto1 = false;

      elecs_relIso03_ = isolation->ElecRelIso( itEle.dr03HcalTowerSumEt(), itEle.dr03EcalRecHitSumEt(), itEle.dr03TkSumPt(), itEle.et() );
      elecs_relIso04_ = isolation->ElecRelIso( itEle.dr04HcalTowerSumEt(), itEle.dr04EcalRecHitSumEt(), itEle.dr04TkSumPt(), itEle.et() );

      // PF iso 03
      reco::GsfElectron::PflowIsolationVariables ele_pfIso = itEle.pfIsolationVariables();
      elecs_PFIsodbeta03_ = isolation->PFIsodBeta(ele_pfIso.sumChargedHadronPt, ele_pfIso.sumNeutralHadronEt, ele_pfIso.sumPhotonEt, ele_pfIso.sumPUPt, itEle.pt() , 0.5);
//      cout << "elec pfiso: " << ele_pfIso.sumChargedHadronPt << "   " << ele_pfIso.sumNeutralHadronEt << "   " << ele_pfIso.sumPhotonEt << "   " << ele_pfIso.sumPUPt << endl;

      PfCharHadIso04_   = itEle.userIsolation(pat::PfChargedHadronIso);
      PfPUCharHadIso04_ = itEle.userIsolation(pat::PfPUChargedHadronIso);
      PfNeuHadIso04_    = itEle.userIsolation(pat::PfNeutralHadronIso);
      PfGamIso04_       = itEle.userIsolation(pat::PfGammaIso);

      if ( PfCharHadIso04_ < 0 || PfPUCharHadIso04_ < 0 || PfNeuHadIso04_ < 0 || PfGamIso04_ < 0 )
      {
/*  
         cout << "sk ele pf check" << endl; 
         cout << "PfCharHadIso03_  test : "   << PfCharHadIso03_   << endl;
         cout << "PfPUCharHadIso03_  test : " << PfPUCharHadIso03_ << endl;
         cout << "PfNeuHadIso03_  test : "    << PfNeuHadIso03_    << endl;
         cout << "PfGamIso03_  test : "       << PfGamIso03_       << endl;
*/
      }

//      cout << " elec pfiso 04 " << itEle.userIsolation(pat::PfChargedHadronIso) << "  " << itEle.userIsolation(pat::PfNeutralHadronIso) << "   " << itEle.userIsolation(pat::PfGammaIso) 
//                                << "   " << itEle.userIsolation(pat::PfPUChargedHadronIso) << endl;
      elecs_PFIsodbeta04_ = isolation->PFIsodBeta(itEle.userIsolation(pat::PfChargedHadronIso), itEle.userIsolation(pat::PfNeutralHadronIso),
                                      itEle.userIsolation(pat::PfGammaIso), itEle.userIsolation(pat::PfPUChargedHadronIso), itEle.pt() , 0.5);
      // In CMSSW_5_x_x for Run I
      //elecs_PFIsodbeta04_ = isolation->PFIsodBeta(itEle.userIsolation(pat::PfChargedHadronIso), itEle.userIsolation(pat::PfNeutralHadronIso),
      //                                itEle.userIsolation(pat::PfGammaIso), itEle.userIsolation(pat::PfPUChargedHadronIso), itEle.pt() , 1.0);

      superclustereta_ =  itEle.superCluster()->eta(); 

      effA04_ = ElectronEffectiveArea::GetElectronEffectiveArea(ElectronEffectiveArea::kEleGammaAndNeutralHadronIso04,
                                                                itEle.superCluster()->eta(), ElectronEffectiveArea::kEleEAData2012);

      effA03_ = ElectronEffectiveArea::GetElectronEffectiveArea(ElectronEffectiveArea::kEleGammaAndNeutralHadronIso03,
                                                                itEle.superCluster()->eta(), ElectronEffectiveArea::kEleEAData2012);
      cout << "effA03_ " << effA03_ << endl;

      elecs_PFIsoRho03_ = isolation->PFIsoRho( ele_pfIso.sumChargedHadronPt, ele_pfIso.sumNeutralHadronEt, ele_pfIso.sumPhotonEt, rho, effA03_, itEle.pt() );

      elecs_PFIsoRho04_ = isolation->PFIsoRho( itEle.userIsolation(pat::PfChargedHadronIso), itEle.userIsolation(pat::PfNeutralHadronIso), itEle.userIsolation(pat::PfGammaIso), rho, effA04_, itEle.pt() );

      ssbtreeManager->Fill( "Elec_relIso03"    , elecs_relIso03_     );
      ssbtreeManager->Fill( "Elec_relIso04"    , elecs_relIso04_     );
      ssbtreeManager->Fill( "Elec_PFIsodBeta03", elecs_PFIsodbeta03_ );
      ssbtreeManager->Fill( "Elec_PFIsodBeta04", elecs_PFIsodbeta04_ );
      ssbtreeManager->Fill( "Elec_PFIsoRho03"  , elecs_PFIsoRho03_   );      
      ssbtreeManager->Fill( "Elec_PFIsoRho04"  , elecs_PFIsoRho04_   );      

      if (!(itEle.gsfTrack().isNull())) 
      {

         nmhit_ = itEle.gsfTrack()->hitPattern().numberOfHits(reco::HitPattern::MISSING_INNER_HITS); 
         gsftrack_dxy_ = itEle.gsfTrack()->dxy( v_vertex[0].position() );
         gsftrack_dz_  = itEle.gsfTrack()->dz( v_vertex[0].position() );
         eles_gsfchar_ = itEle.gsfTrack()->charge();

      }

      ssbtreeManager->Fill( "Elec_Charge_GsfTr" , eles_gsfchar_ );
      ssbtreeManager->Fill( "Elec_Track_GsfdXY" , gsftrack_dxy_ ); 
      ssbtreeManager->Fill( "Elec_Track_GsfdZ"  , gsftrack_dz_  ); 
      ssbtreeManager->Fill( "Elec_Inner_Hit"    , nmhit_        ); 

      if (!(itEle.closestCtfTrackRef().isNull()))
      {

         ctftrack_dxy_ = itEle.closestCtfTrackRef()->dxy( v_vertex[0].position() );
         ctftrack_dz_  = itEle.closestCtfTrackRef()->dz( v_vertex[0].position() );
         eles_ctfchar_ = itEle.closestCtfTrackRef()->charge();

      }

      ssbtreeManager->Fill( "Elec_Charge_CtfTr", eles_ctfchar_ );
      ssbtreeManager->Fill( "Elec_Track_CtfdXY", ctftrack_dxy_ ); 
      ssbtreeManager->Fill( "Elec_Track_CtfdZ" , ctftrack_dz_  ); 

      eles_spchar_ = itEle.scPixCharge();
      ssbtreeManager->Fill( "Elec_Charge_Px", eles_spchar_);
    
      eles_pt_ = itEle.pt();
      eles_eta_ = itEle.eta();
      eles_phi_ = itEle.phi();
      eles_energy_ = itEle.energy();
      eles_pdgid_ = itEle.pdgId();
      eles_charge_ = itEle.charge();

      if (itEle.isGsfCtfScPixChargeConsistent())
      {
         eles_chargeid_gsfctfpx_ = true;
      }

      if (itEle.isGsfCtfChargeConsistent())
      {
         eles_chargeid_gsfctf_ = true;
      }

      if (itEle.isGsfScPixChargeConsistent())
      {
         eles_chargeid_gsfpx_ = true;
      }
// old type Electron ID ... not using now
/*      if (itEle.electronIDs().size()==3)
      {
         mva1_ = itEle.electronIDs().at(0).second;
         mva2_ = itEle.electronIDs().at(1).second;
         mva3_ = itEle.electronIDs().at(2).second;

      }
      else 
      {
         for (unsigned int iel =0; iel < itEle.electronIDs().size(); ++iel )
         {
            cout << "Electron Id ? " << itEle.electronIDs().at(iel).first << endl;
         }
         eles_SCB_Loose_  = itEle.electronIDs().at(4).second; //loose
         eles_SCB_Medium_ = itEle.electronIDs().at(5).second; //medium
         eles_SCB_Tight_  = itEle.electronIDs().at(6).second; //tight
         eles_SCB_Veto_   = itEle.electronIDs().at(7).second; //veto
      }*/

      eles_SCB_Veto_  = (*veto_id_decisions)[itElePtr];
      eles_SCB_Loose_ = (*loose_id_decisions)[itElePtr];
      eles_SCB_Tight_ = (*medium_id_decisions)[itElePtr];
      eles_SCB_Veto_  = (*tight_id_decisions)[itElePtr];
      bool elecs_SCB_HEEB = (*heep_id_decisions)[itElePtr];
      cout << "elecs_SCB_HEEB ? " << elecs_SCB_HEEB << endl;

      
      passconversionveto1 = itEle.passConversionVeto();// pat conversion veto

      ooEmooP_ =  (1.0/itEle.ecalEnergy())*(1.0-itEle.eSuperClusterOverP()) ;

      ssbtreeManager->Fill("Elec", eles_pt_,eles_eta_,eles_phi_,eles_energy_,ele_index );

      ssbtreeManager->Fill( "Elec_Conversion"         , passconversionveto1     );
      ssbtreeManager->Fill( "Elec_SCB_Loose"          , eles_SCB_Loose_         );
      ssbtreeManager->Fill( "Elec_SCB_Medium"         , eles_SCB_Medium_        );
      ssbtreeManager->Fill( "Elec_SCB_Tight"          , eles_SCB_Tight_         );
      ssbtreeManager->Fill( "Elec_SCB_Veto"           , eles_SCB_Veto_          );
      ssbtreeManager->Fill( "Elec_MVA_NonTrigV0"      , mva1_                   );
      ssbtreeManager->Fill( "Elec_MVA_TrigNoIPV0"     , mva2_                   );
      ssbtreeManager->Fill( "Elec_MVA_TrigV0"         , mva3_                   );
      ssbtreeManager->Fill( "Elec_pdgId"              , eles_pdgid_             );
      ssbtreeManager->Fill( "Elec_Charge"             , eles_charge_            );
      ssbtreeManager->Fill( "Elec_ChargeId_GsfCtfPx"  , eles_chargeid_gsfctfpx_ );
      ssbtreeManager->Fill( "Elec_ChargeId_GsfCtf"    , eles_chargeid_gsfctf_   );
      ssbtreeManager->Fill( "Elec_ChargeId_GsfPx"     , eles_chargeid_gsfpx_    );
      ssbtreeManager->Fill( "Elec_Supercluster_Eta"   , superclustereta_        );
      ssbtreeManager->Fill( "Elec_SCB_dEtaIn"         , itEle.deltaEtaSuperClusterTrackAtVtx() );
      ssbtreeManager->Fill( "Elec_SCB_dPhiIn"         , itEle.deltaPhiSuperClusterTrackAtVtx() );
      ssbtreeManager->Fill( "Elec_SCB_sigmaIetaIeta"  , itEle.full5x5_sigmaIetaIeta() );
      ssbtreeManager->Fill( "Elec_SCB_hOverE"         , itEle.hadronicOverEm() );
      ssbtreeManager->Fill( "Elec_SCB_ooEmooP"        , ooEmooP_ );

      ele_index++;

   }
   ssbtreeManager->Fill( "Elec_Count" , ele_index );
  

   /////////////////////////
   /// Jets Information  ///
   /////////////////////////


   // Utility for Jet ID
   PFJetIDSelectionFunctor LooseJetID(pfLooseJetIDparam);
   pat::strbitset looseJetIdSel = LooseJetID.getBitTemplate();

   PFJetIDSelectionFunctor TightJetID(pfTightJetIDparam);
   pat::strbitset tightJetIdSel = TightJetID.getBitTemplate();

   jet_index = 0;
 
   Handle<pat::JetCollection> jets;
   iEvent.getByToken(jetToken_, jets);

   for ( const pat::Jet &itJet : *jets ) 
   {

      ////////////////////////////////////
      /// selection of resaonable jets ///
      ////////////////////////////////////
      
      if ( itJet.pt() < 20.0 || abs( itJet.eta() ) > 2.5 ) {continue;} // import at python config

      jets_pt_ = -9999;
      jets_eta_ = -9999;
      jets_phi_ = -9999;
      jets_energy_ = -9999;
      jets_pdgid_ = 0;
      jets_isJet_ = false;
      jets_bDisc_ = -9999;
      jets_charge_ = -9999;
      jets_pfjetid_ = -999;
      jets_mvapujetid_ = -999;
      jets_mvapujet_ = -999;
      isLoosejetid_pass = false;
      isTightjetid_pass = false;


      ///For PFJetIDSelectionFunctor
      looseJetIdSel.set(false);
      isLoosejetid_pass = LooseJetID(itJet, looseJetIdSel);

      tightJetIdSel.set(false);
      isTightjetid_pass = TightJetID(itJet, tightJetIdSel);

      if (isTightjetid_pass)
      {
         jets_pfjetid_ = 2;
      }
      else if (isLoosejetid_pass)
      {
         jets_pfjetid_ = 1;
      }
      else 
      {
         jets_pfjetid_ = 0;
      }


      ////////////////////////////
      /// End of jet selection ///
      ////////////////////////////

      float mva   = -999;
          
      jets_pt_ = itJet.pt();
      jets_eta_ = itJet.eta();
      jets_phi_ = itJet.phi();
      jets_energy_ = itJet.energy();
      jets_charge_ = itJet.charge();

      /// works only for JPT or PF jet
      jets_mvapujet_ = mva;
      jets_pdgid_ = itJet.pdgId();
      jets_isJet_ = itJet.isJet();
      jets_bDisc_ = itJet.bDiscriminator(csvBJetTag);

      ssbtreeManager->Fill( "Jet", jets_pt_, jets_eta_, jets_phi_, jets_energy_, jet_index);
      ssbtreeManager->Fill( "Jet_Charge"   , jets_charge_     );
      ssbtreeManager->Fill( "Jet_isJet"    , jets_isJet_      );
      ssbtreeManager->Fill( "Jet_bDisc"    , jets_bDisc_      );
      ssbtreeManager->Fill( "Jet_PFId"     , jets_pfjetid_    );
      ssbtreeManager->Fill( "Jet_PileUpId" , jets_mvapujetid_ );
      ssbtreeManager->Fill( "Jet_PileUpMVA", jets_mvapujet_   );
      
  
      jet_index++;

   }
   ssbtreeManager->Fill( "Jet_Count", jet_index );


   ///////////////////////////////
   /////// MET Information ///////
   ///////////////////////////////
   MET_index=0;

   Handle<pat::METCollection> mets;
   iEvent.getByToken(metToken_, mets);
   //const pat::MET &met = mets->front();

   for (const pat::MET &itMet : *mets)
   {
      ssbtreeManager->Fill( "MET" , itMet.pt(), 0, itMet.phi(), 0, MET_index );
      MET_index++;
   }


   /// Fill Ntuples at each event
   ssbtreeManager->FillNtuple();

#ifdef THIS_IS_AN_EVENT_EXAMPLE
   Handle<ExampleData> pIn;
   iEvent.getByLabel("example",pIn);
#endif
   
#ifdef THIS_IS_AN_EVENTSETUP_EXAMPLE
   ESHandle<SetupData> pSetup;
   iSetup.get<SetupRecord>().get(pSetup);
#endif
}


// ------------ method called once each job just before starting event loop  ------------
void 
SSBAnalyzer::beginJob()
{
   ssbtree = ssbfs->make<TTree>("SSBTree", "Tree for Physics Analyses at CMS");
   ssbtreeManager = new SSBTreeManager();
//   ssbtreeManager->book(ssbtree);
   ssbtreeManager->Book(ssbtree);

   /// Isolation calculation
   isolation = new SSBIsoCal(); 
/*
   /// PDF
   for (unsigned int k=1; k<=pdfSets.size(); k++) 
   {
      LHAPDF::initPDFSet(k, pdfSets[k-1]);
   }
*/
}

// ------------ method called once each job just after ending the event loop  ------------
void 
SSBAnalyzer::endJob() 
{
}

// ------------ method called when starting to processes a run  ------------
void 
SSBAnalyzer::beginRun(edm::Run const&, edm::EventSetup const&)
{
}

// ------------ method called when ending the processing of a run  ------------
void 
SSBAnalyzer::endRun(edm::Run const&, edm::EventSetup const&)
{
}

// ------------ method called when starting to processes a luminosity block  ------------
void 
SSBAnalyzer::beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
{
}

// ------------ method called when ending the processing of a luminosity block  ------------
void 
SSBAnalyzer::endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
{
}

// ------------ method fills 'descriptions' with the allowed parameters for the module  ------------
void
SSBAnalyzer::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
  //The following says we do not know what parameters are allowed so do no validation
  // Please change this to state exactly what you do use, even if it is no parameters
  edm::ParameterSetDescription desc;
  desc.setUnknown();
  descriptions.addDefault(desc);
}

//define this as a plug-in
DEFINE_FWK_MODULE(SSBAnalyzer);
