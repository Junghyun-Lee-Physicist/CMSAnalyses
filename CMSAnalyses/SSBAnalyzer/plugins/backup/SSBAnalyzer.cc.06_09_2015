// -*- C++ -*-
//
// Package:    SSBAnalyzer
// Class:      SSBAnalyzer
// 
/**\class SSBAnalyzer SSBAnalyzer.cc CMSAnalyses/SSBAnalyzer/src/SSBAnalyzer.cc

 Description: [one line class summary]

 Implementation:
     [Notes on implementation]
*/
//
// Original Author:  Sungwoong Cho, Seungkyu Ha, Sehwook Lee, Suyoung Choi, Jaehoon Lim, Dooyeon Gyun, 588 R-004, +41227678602
//         Created:  Mon Jun  2 11:21:34 CEST 2014
// $Id$
//
//


// system include files
#include <memory>
#include "CMSAnalyses/SSBAnalyzer/interface/SSBAnalyzer.h"

using namespace std;
using namespace reco;
using namespace isodeposit;
using namespace pat;
//
// constants, enums and typedefs
//

//
// static data member definitions
//
//
// constructors and destructor
//
SSBAnalyzer::SSBAnalyzer(const edm::ParameterSet& iConfig)
:
// needed for Vertex
vertexTag( iConfig.getParameter<edm::InputTag>("pvTag") ),
// needed for Rho
rhoTag( iConfig.getParameter<edm::InputTag>("RhoTag") ),
// needed for Trigger
triggerList( iConfig.getParameter<std::vector<std::string>>("trigList") ),
triggerBits_(consumes<edm::TriggerResults>(iConfig.getParameter<edm::InputTag>("bits"))),
triggerPrescales_(consumes<pat::PackedTriggerPrescales>(iConfig.getParameter<edm::InputTag>("prescales"))),
// needed for Muon
muonTag( iConfig.getParameter<edm::InputTag>("muTag") ),
//Muon test 
muonToken_(consumes<pat::MuonCollection>(iConfig.getParameter<edm::InputTag>("muTag"))),
// needed for Electron
electronTag( iConfig.getParameter<edm::InputTag>("eleTag") ),
elecmvaIdNoTrTag( iConfig.getParameter<edm::InputTag>("emvaIdNoTrTag") ),
elecmvaIdTrNoIPTag( iConfig.getParameter<edm::InputTag>("emvaIdTrNoIPTag") ),
elecmvaIdTrTag( iConfig.getParameter<edm::InputTag>("emvaIdTrTag") ),
beamSpotInputTag( iConfig.getParameter<edm::InputTag>("bstag") ),
conversionsInputTag( iConfig.getParameter<edm::InputTag>("convertag") ),
//ele test
electronToken_(consumes<pat::ElectronCollection>(iConfig.getParameter<edm::InputTag>("eleTag"))),
pfToken_(consumes<pat::PackedCandidateCollection>(iConfig.getParameter<edm::InputTag>("pfCands"))),
// needed for Jet
jetTag( iConfig.getParameter<edm::InputTag>("jtTag") ),
pfLooseJetIDparam( iConfig.getParameter<edm::ParameterSet> ("PFLooseJetID") ),
pfTightJetIDparam( iConfig.getParameter<edm::ParameterSet> ("PFTightJetID") ),
csvBJetTag( iConfig.getParameter<std::string>("csvbjetTag") ),
MetTag( iConfig.getParameter<edm::InputTag>("metTag") )
{
   //now do what ever initialization is needed

}


SSBAnalyzer::~SSBAnalyzer()
{
 
   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)

}


//
// member functions
//

// ------------ method called for each event  ------------
void
SSBAnalyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
{
   using namespace edm;

   Event = -999;
   Run = -999;
   Lumi = -999;
   isData = false;

   /// Initailizing variable 
   ssbtreeManager->InitializeVariables(); 


   Event = iEvent.id().event();
   Run = iEvent.id().run();
   Lumi = iEvent.id().luminosityBlock();
   isData = iEvent.isRealData();

   ssbtreeManager->Fill( "Info_EventNumber", Event  );
   ssbtreeManager->Fill( "Info_RunNumber"  , Run    ); 
   ssbtreeManager->Fill( "Info_Luminosity" , Lumi   ); 
   ssbtreeManager->Fill( "Info_isData"     , isData ); 



                                            
   ///////////////////////////////////
   // Primary Vertices Information ///
   ///////////////////////////////////

/*   map_vtx_sumptsquare.clear();
   map_vtx_x.clear();
   map_vtx_y.clear();
   map_vtx_z.clear();
   map_vtx_x_e.clear();
   map_vtx_y_e.clear();
   map_vtx_z_e.clear();*/
   vtx_x_ = -9999.0;
   vtx_y_ = -9999.0;
   vtx_z_ = -9999.0;
   vtx_x_e = -9999.0;
   vtx_y_e = -9999.0;
   vtx_z_e = -9999.0;

   int numpvidx =0;
   std::vector<double> v_sumPtSquare;
   v_sumPtSquare.clear();
   std::vector<reco::Vertex> v_vertex;
   v_vertex.clear();

   Handle<VertexCollection> vertices;
   iEvent.getByLabel(vertexTag, vertices);
   for (VertexCollection::const_iterator itPV = vertices->begin(); itPV != vertices->end(); itPV++)
   {
      PV_Filter_ = false;

      if ( !itPV->isFake() && itPV->ndof() > 4.0 && itPV->position().Rho() < 2. && abs(itPV->z()) < 24. )
      {
         PV_Filter_ = true;
         ssbtreeManager->Fill( "Filter_PV" , PV_Filter_ );

      }
      else 
      {  
         ssbtreeManager->Fill( "Filter_PV" , PV_Filter_ );
      }
//      sumtrackptsquare = -9999.0;
//      for(reco::Vertex::trackRef_iterator trkItr = itPV->tracks_begin(); trkItr != itPV->tracks_end(); ++trkItr)
//      {
//         sumtrackptsquare += (*trkItr)->pt()*(*trkItr)->pt();
//      }
 
//      ssbtreeManager->Fill( "Vertex_SumPtSquare", sumtrackptsquare );

//      v_sumPtSquare.push_back( sumtrackptsquare );
//      map_vtx_sumptsquare[sumtrackptsquare] = *itPV;
      v_vertex.push_back(*itPV);
//      map_vtx_x[sumtrackptsquare] = (*itPV).x();
//      map_vtx_y[sumtrackptsquare] = (*itPV).y();
//      map_vtx_z[sumtrackptsquare] = (*itPV).z();
//      map_vtx_x_e[sumtrackptsquare] = (*itPV).xError();
//      map_vtx_y_e[sumtrackptsquare] = (*itPV).yError();
//      map_vtx_z_e[sumtrackptsquare] = (*itPV).zError();
      vtx_x_  = (*itPV).x(); 
      vtx_y_  = (*itPV).y();
      vtx_z_  = (*itPV).z();
      vtx_x_e = (*itPV).xError();
      vtx_y_e = (*itPV).yError();
      vtx_z_e = (*itPV).zError();

      ssbtreeManager->Fill( "Vertex_X", vtx_x_ );
      ssbtreeManager->Fill( "Vertex_Y", vtx_y_ );
      ssbtreeManager->Fill( "Vertex_Z", vtx_z_ );
      ssbtreeManager->Fill( "Vertex_X_Error", vtx_x_e );
      ssbtreeManager->Fill( "Vertex_Y_Error", vtx_y_e );
      ssbtreeManager->Fill( "Vertex_Z_Error", vtx_z_e );

      numpvidx++;
   }
   ssbtreeManager->Fill( "PV_Count", numpvidx );

/*   vtx_x_ = -9999.0;
   vtx_y_ = -9999.0;
   vtx_z_ = -9999.0;
   vtx_x_e = -9999.0;
   vtx_y_e = -9999.0;
   vtx_z_e = -9999.0;

   for (unsigned int i=0; i < v_sumPtSquare.size(); i++)
   {

      vtx_x_ = map_vtx_x.find( v_sumPtSquare.at(i) )->second; 
      vtx_y_ = map_vtx_y.find( v_sumPtSquare.at(i) )->second;
      vtx_z_ = map_vtx_z.find( v_sumPtSquare.at(i) )->second;
      vtx_x_e = map_vtx_x_e.find( v_sumPtSquare.at(i) )->second;
      vtx_y_e = map_vtx_y_e.find( v_sumPtSquare.at(i) )->second;
      vtx_z_e = map_vtx_z_e.find( v_sumPtSquare.at(i) )->second;

      ssbtreeManager->Fill( "Vertex_X", vtx_x_ );
      ssbtreeManager->Fill( "Vertex_Y", vtx_y_ );
      ssbtreeManager->Fill( "Vertex_Z", vtx_z_ );
      ssbtreeManager->Fill( "Vertex_X_Error", vtx_x_e );
      ssbtreeManager->Fill( "Vertex_Y_Error", vtx_y_e );
      ssbtreeManager->Fill( "Vertex_Z_Error", vtx_z_e );

   }*/


   /////////////////////////
   ///  Rho Information  ///
   /////////////////////////

   Handle<double> rhoHandle;
   iEvent.getByLabel(rhoTag, rhoHandle);
   
   if(rhoHandle.isValid()) 
   {
      rho = *(rhoHandle.product());
   } else {
      cout << "Rho is invalid!!!" << endl;

   }

   ///////////////////////////
   /// Trigger Information ///
   ///////////////////////////
   edm::Handle<edm::TriggerResults> triggerBits;
   iEvent.getByToken(triggerBits_, triggerBits);

   edm::Handle<pat::PackedTriggerPrescales> triggerPrescales;
   iEvent.getByToken(triggerPrescales_, triggerPrescales);

   const edm::TriggerNames &names = iEvent.triggerNames(*triggerBits);
   for (unsigned int i = 0, n = triggerBits->size(); i < n; ++i) 
   {
//        std::cout << "Trigger " << names.triggerName(i) << 
//                ": " << (triggerBits->accept(i) ? "PASS" : "fail (or not run)") 
//                << std::endl;
      for (unsigned int j =0; j < triggerList.size() ;j++)
      {
         trigPass_ = false;
         trigError_ = false;
         trigRun_ =false;
         unsigned int trigPreScale_ = 0;
         if (TString(names.triggerName(i)).Contains(triggerList.at(j)) )
         {

//            cout << "Test Trigger : " << triggerList.at(j) << endl;
            trigPass_ = triggerBits->accept(i);
            trigError_ = triggerBits->error(i);
            trigRun_ = triggerBits->wasrun(i) ;
            trigPreScale_ = triggerPrescales->getPrescaleForIndex(i);
//            cout << "trigPreScale_ ? " << trigPreScale_ << endl;
//            cout << "trigError_ ? " << trigError_ << endl;
//            cout << "trigRun_ ? " << trigRun_ << endl;

            ssbtreeManager->Fill( "Trigger_Name"    , names.triggerName(i) );
            ssbtreeManager->Fill( "Trigger_isPass"  , trigPass_            );
            ssbtreeManager->Fill( "Trigger_PreScale", trigPreScale_        );
            ssbtreeManager->Fill( "Trigger_isError" , trigError_           );
            ssbtreeManager->Fill( "Trigger_isRun"   , trigRun_             );
     
         }

      }
     
   }



   /////////////////////////
   /// Muon Information ////
   /////////////////////////

   Handle<MuonCollection> muons;
   iEvent.getByLabel(muonTag, muons);
   muon_index=0; 
   for (MuonCollection::const_iterator itMu = muons->begin() ; itMu != muons->end(); itMu++)
   {

      isLoose = false;
      isSoft = false;
      isTight = false;
      isHighPt = false;

      isLoose = (*itMu).isLooseMuon() ;
//      isSoft =  (*itMu).isSoftMuon(map_vtx_sumptsquare.find( v_sumPtSquare.at(0) )->second );
      isSoft =  (*itMu).isSoftMuon( v_vertex[0] );
//      isTight = (*itMu).isTightMuon( map_vtx_sumptsquare.find( v_sumPtSquare.at(0) )->second );
      isTight = (*itMu).isTightMuon( v_vertex[0] );
//      isHighPt = (*itMu).isHighPtMuon( map_vtx_sumptsquare.find( v_sumPtSquare.at(0) )->second );
      isHighPt = (*itMu).isHighPtMuon( v_vertex[0] );
//      isHighPt = (*itMu).isHighPtMuon( map_vtx_sumptsquare.find( v_sumPtSquare.at(0) )->second,  reco::improvedTuneP );// for CMSSW_5_3_20

      relIso03 = isolation->MuonRelTrkIso( (*itMu).isolationR03().sumPt, (*itMu).pt() );

      PFIsodbeta03 = isolation->PFIsodBeta( (*itMu).pfIsolationR03().sumChargedHadronPt, (*itMu).pfIsolationR03().sumNeutralHadronEt, 
                                                (*itMu).pfIsolationR03().sumPhotonEt, (*itMu).pfIsolationR03().sumPUPt, (*itMu).pt() ,0.5);

      PFIsodbeta04 = isolation->PFIsodBeta( (*itMu).pfIsolationR04().sumChargedHadronPt, (*itMu).pfIsolationR04().sumNeutralHadronEt, 
                                                (*itMu).pfIsolationR04().sumPhotonEt, (*itMu).pfIsolationR04().sumPUPt, (*itMu).pt() ,0.5);


//      cout << (*itMu).pfIsolationR03().sumChargedHadronPt << "   " << (*itMu).pfIsolationR04().sumChargedHadronPt << "   " 
//           << (*itMu).pfIsolationR03().sumPUPt            << "   " << (*itMu).pfIsolationR04().sumPUPt << endl;
//      cout << "sumChargedHadronPt 04 : " << (*itMu).pfIsolationR04().sumChargedHadronPt << endl;
//      cout << "pt : " << (*itMu).pt() << " Muon_PFIsodBeta04 " << PFIsodbeta04 << endl;
//      cout << "Muon pt : " << (*itMu).pt() << " eta : " << (*itMu).eta() << " phi : " << (*itMu).phi() 
//           << " sumChargedHadronPt 04 : " << (*itMu).pfIsolationR04().sumChargedHadronPt   
//           << " sumNeutralHadronEt 04 : " << (*itMu).pfIsolationR04().sumNeutralHadronEt 
//           << " sumPhotonEt : " << (*itMu).pfIsolationR04().sumPhotonEt
//           << " neutral? " <<  (*itMu).pfIsolationR04().sumNeutralHadronEt +  (*itMu).pfIsolationR04().sumPhotonEt
//           << " sumPUPt : " << (*itMu).pfIsolationR04().sumPUPt << endl;

//      cout << "test mu 04 : " << (*itMu).pfIsolationR04().sumChargedHadronPt << endl;

      ssbtreeManager->Fill( "Muon", (*itMu).pt(), (*itMu).eta(), (*itMu).phi(), (*itMu).energy(), muon_index);

      ssbtreeManager->Fill( "Muon_isLoose"     , isLoose          );
      ssbtreeManager->Fill( "Muon_isSoft"      , isSoft           );
      ssbtreeManager->Fill( "Muon_isTight"     , isTight          );
      ssbtreeManager->Fill( "Muon_isHighPt"    , isHighPt         );
      ssbtreeManager->Fill( "Muon_relIso03"    , relIso03         );
      ssbtreeManager->Fill( "Muon_PFIsodBeta03", PFIsodbeta03     );
      ssbtreeManager->Fill( "Muon_PFIsodBeta04", PFIsodbeta04     );
      ssbtreeManager->Fill( "Muon_pdgId"       , (*itMu).pdgId()  );
      ssbtreeManager->Fill( "Muon_Charge"      , (*itMu).charge() );

      muon_index++;

   }
   ssbtreeManager->Fill( "Muon_Count", muon_index );


   ////////////////////////////
   /////// Electron infor//////
   ////////////////////////////
   ele_index=0;

   Handle<ElectronCollection> ele;
   iEvent.getByLabel( electronTag, ele );

   edm::Handle < reco::BeamSpot > bsHandle;
   iEvent.getByLabel(beamSpotInputTag, bsHandle);

   Handle<ConversionCollection> hConversions;
   iEvent.getByLabel(conversionsInputTag, hConversions);

   for ( unsigned int i=0; i<ele->size(); i++)
   {

      const pat::Electron & itEle = ele->at(i);

      eles_pt_ = -9999.0;
      eles_eta_ = -9999.0;
      eles_phi_ = -9999.0;
      eles_energy_ = -9999.0;
      superclustereta_ = -999.0;

      elecs_relIso03_ = -999.0;
      elecs_relIso04_ = -999.0;
      elecs_PFIsodbeta03_ = -999.0;
      elecs_PFIsodbeta04_ = -999.0;
      elecs_PFIsoRho03_ = -999.0;
      elecs_PFIsoRho04_ = -999.0;

      PfCharHadIso03_   = -999.0;
      PfPUCharHadIso03_ = -999.0;
      PfNeuHadIso03_    = -999.0;
      PfGamIso03_       = -999.0;
      PfCharHadIso04_   = -999.0;
      PfPUCharHadIso04_ = -999.0;
      PfNeuHadIso04_    = -999.0;
      PfGamIso04_       = -999.0;

      elecs_IsoWrong_ = false;

/*      eles_eidLoose_ = -999;
      eles_eidRobustHighEnergy_ = -999;
      eles_eidRobustLoose_ = -999;
      eles_eidRobustTight_ = -999;
      eles_eidTight_ = -999;*/
      eles_loose_ = false;
      eles_medium_ = false;
      eles_tight_ = false;
      eles_veto_ = false;

      eles_pdgid_ = 0;
      eles_charge_ = -999;
      eles_chargeid_gsfctfpx_ = false;
      eles_chargeid_gsfpx_ = false;
      eles_chargeid_gsfctf_ = false;
      eles_gsfchar_ = -999;
      eles_ctfchar_ = -999;
      eles_spchar_ = -999;

      gsftrack_dxy_ = -999.0;
      gsftrack_dz_ = -999.0;
      ctftrack_dxy_ = -999.0;
      ctftrack_dz_ = -999.0; 

      mva1_ = -999.0;
      mva2_ = -999.0;
      mva3_ = -999.0;


      nmhit_ = 999;
      matchesConv = false;
      passconversionveto = false;
      passconversionveto1 = false;

      elecs_relIso03_ = isolation->ElecRelIso( itEle.dr03HcalTowerSumEt(), itEle.dr03EcalRecHitSumEt(), itEle.dr03TkSumPt(), itEle.et() );
      elecs_relIso04_ = isolation->ElecRelIso( itEle.dr04HcalTowerSumEt(), itEle.dr04EcalRecHitSumEt(), itEle.dr04TkSumPt(), itEle.et() );

      // PF iso 03
      reco::GsfElectron::PflowIsolationVariables ele_pfIso = itEle.pfIsolationVariables();
      elecs_PFIsodbeta03_ = isolation->PFIsodBeta(ele_pfIso.sumChargedHadronPt, ele_pfIso.sumNeutralHadronEt, ele_pfIso.sumPhotonEt, ele_pfIso.sumPUPt, itEle.pt() , 0.5);
      //cout << "elec pfiso: " << ele_pfIso.sumChargedHadronPt << "   " << ele_pfIso.sumNeutralHadronEt << "   " << ele_pfIso.sumPhotonEt << "   " << ele_pfIso.sumPUPt << endl;

      PfCharHadIso04_   = itEle.userIsolation(pat::PfChargedHadronIso);
      PfPUCharHadIso04_ = itEle.userIsolation(pat::PfPUChargedHadronIso);
      PfNeuHadIso04_    = itEle.userIsolation(pat::PfNeutralHadronIso);
      PfGamIso04_       = itEle.userIsolation(pat::PfGammaIso);

      if ( PfCharHadIso04_ < 0 || PfPUCharHadIso04_ < 0 || PfNeuHadIso04_ < 0 || PfGamIso04_ < 0 )
      {
/*         cout << "sk ele pf check" << endl; 
         cout << "PfCharHadIso03_  test : "   << PfCharHadIso03_   << endl;
         cout << "PfPUCharHadIso03_  test : " << PfPUCharHadIso03_ << endl;
         cout << "PfNeuHadIso03_  test : "    << PfNeuHadIso03_    << endl;
         cout << "PfGamIso03_  test : "       << PfGamIso03_       << endl;*/
      }

      elecs_PFIsodbeta04_ = isolation->PFIsodBeta(itEle.userIsolation(pat::PfChargedHadronIso), itEle.userIsolation(pat::PfNeutralHadronIso),
                                      itEle.userIsolation(pat::PfGammaIso), itEle.userIsolation(pat::PfPUChargedHadronIso), itEle.pt() , 0.5);
      // In CMSSW_5_x_x for Run I
      //elecs_PFIsodbeta04_ = isolation->PFIsodBeta(itEle.userIsolation(pat::PfChargedHadronIso), itEle.userIsolation(pat::PfNeutralHadronIso),
      //                                itEle.userIsolation(pat::PfGammaIso), itEle.userIsolation(pat::PfPUChargedHadronIso), itEle.pt() , 1.0);

      superclustereta_ =  itEle.superCluster()->eta(); 

      effA04_ = ElectronEffectiveArea::GetElectronEffectiveArea(ElectronEffectiveArea::kEleGammaAndNeutralHadronIso04,
                                                                itEle.superCluster()->eta(), ElectronEffectiveArea::kEleEAData2012);

      elecs_PFIsoRho04_ = isolation->PFIsoRho( itEle.userIsolation(pat::PfChargedHadronIso), itEle.userIsolation(pat::PfNeutralHadronIso), itEle.userIsolation(pat::PfGammaIso), rho, effA04_, itEle.pt() );

      ssbtreeManager->Fill( "Elec_relIso03"    , elecs_relIso03_     );
      ssbtreeManager->Fill( "Elec_relIso04"    , elecs_relIso04_     );
      ssbtreeManager->Fill( "Elec_PFIsodBeta03", elecs_PFIsodbeta03_ );
      ssbtreeManager->Fill( "Elec_PFIsodBeta04", elecs_PFIsodbeta04_ );
      ssbtreeManager->Fill( "Elec_PFIsoRho04"  , elecs_PFIsoRho04_   );      

      if (!(itEle.gsfTrack().isNull())) 
      {

         nmhit_ = itEle.gsfTrack()->hitPattern().numberOfHits(reco::HitPattern::MISSING_INNER_HITS); 
//         gsftrack_dxy_ =itEle.gsfTrack()->dxy(map_vtx_sumptsquare.find( v_sumPtSquare.at(0) )->second.position());
//         gsftrack_dz_ = itEle.gsfTrack()->dz(map_vtx_sumptsquare.find( v_sumPtSquare.at(0) )->second.position());
         gsftrack_dxy_ = itEle.gsfTrack()->dxy( v_vertex[0].position() );
         gsftrack_dz_  = itEle.gsfTrack()->dz( v_vertex[0].position() );
         eles_gsfchar_ = itEle.gsfTrack()->charge();

      }

      ssbtreeManager->Fill( "Elec_Charge_GsfTr" , eles_gsfchar_ );
      ssbtreeManager->Fill( "Elec_Track_GsfdXY" , gsftrack_dxy_ ); 
      ssbtreeManager->Fill( "Elec_Track_GsfdZ"  , gsftrack_dz_  ); 
      ssbtreeManager->Fill( "Elec_Inner_Hit"    , nmhit_        ); 

      if (!(itEle.closestCtfTrackRef().isNull()))
      {

//         ctftrack_dxy_ = itEle.closestCtfTrackRef()->dxy(map_vtx_sumptsquare.find( v_sumPtSquare.at(0) )->second.position());
//         ctftrack_dz_  = itEle.closestCtfTrackRef()->dz(map_vtx_sumptsquare.find( v_sumPtSquare.at(0) )->second.position());
         ctftrack_dxy_ = itEle.closestCtfTrackRef()->dxy( v_vertex[0].position() );
         ctftrack_dz_  = itEle.closestCtfTrackRef()->dz( v_vertex[0].position() );
         eles_ctfchar_ = itEle.closestCtfTrackRef()->charge();

      }

      ssbtreeManager->Fill( "Elec_Charge_CtfTr", eles_ctfchar_ );
      ssbtreeManager->Fill( "Elec_Track_CtfdXY", ctftrack_dxy_ ); 
      ssbtreeManager->Fill( "Elec_Track_CtfdZ" , ctftrack_dz_  ); 

      eles_spchar_ = itEle.scPixCharge();
      ssbtreeManager->Fill( "Elec_Charge_Px", eles_spchar_);
    
      eles_pt_ = itEle.pt();
      eles_eta_ = itEle.eta();
      eles_phi_ = itEle.phi();
      eles_energy_ = itEle.energy();
      eles_pdgid_ = itEle.pdgId();
      eles_charge_ = itEle.charge();

      if (itEle.isGsfCtfScPixChargeConsistent())
      {
         eles_chargeid_gsfctfpx_ = true;
      }

      if (itEle.isGsfCtfChargeConsistent())
      {
         eles_chargeid_gsfctf_ = true;
      }

      if (itEle.isGsfScPixChargeConsistent())
      {
         eles_chargeid_gsfpx_ = true;
      }

      if (itEle.electronIDs().size()==3)
      {
         mva1_ = itEle.electronIDs().at(0).second;
         mva2_ = itEle.electronIDs().at(1).second;
         mva3_ = itEle.electronIDs().at(2).second;

      }
      else 
      {
/*         eles_eidLoose_ = itEle.electronIDs().at(0).second;
         for (unsigned int j = 0; j < itEle.electronIDs().size(); ++j ){
         cout <<   j << " ? " << itEle.electronIDs().at(j).first << endl;}
         eles_eidRobustHighEnergy_ = itEle.electronIDs().at(1).second;
         eles_eidRobustLoose_ = itEle.electronIDs().at(2).second;
         eles_eidRobustTight_ = itEle.electronIDs().at(3).second;
         eles_eidTight_ = itEle.electronIDs().at(4).second;*/
         eles_loose_  = itEle.electronIDs().at(4).second; //loose
         eles_medium_ = itEle.electronIDs().at(5).second; //medium
         eles_tight_  = itEle.electronIDs().at(6).second; //tight
         eles_veto_   = itEle.electronIDs().at(7).second; //veto
      }
      
      passconversionveto1 = itEle.passConversionVeto();// pat conversion veto

      ssbtreeManager->Fill("Elec", eles_pt_,eles_eta_,eles_phi_,eles_energy_,ele_index );

      ssbtreeManager->Fill( "Elec_Conversion"         , passconversionveto1       );
/*      ssbtreeManager->Fill( "Elec_Id_Loose"           , eles_eidLoose_            );
      ssbtreeManager->Fill( "Elec_Id_RobustHighEnergy", eles_eidRobustHighEnergy_ );
      ssbtreeManager->Fill( "Elec_Id_RobustLoose"     , eles_eidRobustLoose_      );
      ssbtreeManager->Fill( "Elec_Id_RobustTight"     , eles_eidRobustTight_      );
      ssbtreeManager->Fill( "Elec_Id_Tight"           , eles_eidTight_            );*/
      ssbtreeManager->Fill( "Elec_Id_Loose"           , eles_loose_               );
      ssbtreeManager->Fill( "Elec_Id_Medium"          , eles_medium_              );
      ssbtreeManager->Fill( "Elec_Id_Tight"           , eles_tight_               );
      ssbtreeManager->Fill( "Elec_Id_Veto"            , eles_veto_                );
      ssbtreeManager->Fill( "Elec_MVA_NonTrigV0"      , mva1_                     );
      ssbtreeManager->Fill( "Elec_MVA_TrigNoIPV0"     , mva2_                     );
      ssbtreeManager->Fill( "Elec_MVA_TrigV0"         , mva3_                     );
      ssbtreeManager->Fill( "Elec_pdgId"              , eles_pdgid_               );
      ssbtreeManager->Fill( "Elec_Charge"             , eles_charge_              );
      ssbtreeManager->Fill( "Elec_ChargeId_GsfCtfPx"  , eles_chargeid_gsfctfpx_   );
      ssbtreeManager->Fill( "Elec_ChargeId_GsfCtf"    , eles_chargeid_gsfctf_     );
      ssbtreeManager->Fill( "Elec_ChargeId_GsfPx"     , eles_chargeid_gsfpx_      );
      ssbtreeManager->Fill( "Elec_Supercluster_Eta"   , superclustereta_          );
      
      ele_index++;

   }
   ssbtreeManager->Fill( "Elec_Count" , ele_index );


   ////////////////////////////
   /// Isolation New Way !! ///
   ////////////////////////////

   edm::Handle<pat::MuonCollection> mus;
   iEvent.getByToken(muonToken_, mus);

   Handle<pat::ElectronCollection> electrons;
   iEvent.getByToken(electronToken_, electrons);

   edm::Handle<pat::PackedCandidateCollection> pfs;
   iEvent.getByToken(pfToken_, pfs);

   std::vector<const reco::Candidate *> leptons;
   leptons.clear();
   std::vector<const pat::Muon*> v_mus;
   v_mus.clear();
   std::vector<const pat::Electron*> v_els;
   v_els.clear();
   int  ele_index_1 = 0;
   muon_index_1= 0; 

   for (const pat::Muon &mu : *mus) {leptons.push_back(&mu);v_mus.push_back(&mu);}
   for (const pat::Electron &el : *electrons) {leptons.push_back(&el);v_els.push_back(&el); }
   for (const reco::Candidate *lep : leptons) 
   {
   //   if (lep->pt() < 5) continue;
      charged03 = 0, neutral03 = 0, pileup03  = 0;
      charged04 = 0, neutral04 = 0, pileup04  = 0;
      std::vector<reco::CandidatePtr> footprint;
      for (unsigned int i = 0, n = lep->numberOfSourceCandidatePtrs(); i < n; ++i) 
      {
            footprint.push_back(lep->sourceCandidatePtr(i));
      }
      for (unsigned int i = 0, n = pfs->size(); i < n; ++i) 
      {
         const pat::PackedCandidate &pf = (*pfs)[i];
         /// pf 03 ... ///
         if (deltaR(pf,*lep) < 0.3) 
         {
            //pfcandidate-based footprint removal
            if (std::find(footprint.begin(), footprint.end(), reco::CandidatePtr(pfs,i)) != footprint.end()) {continue;}
            if (pf.charge() == 0) 
            {
               if (pf.pt() > 0.5) neutral03 += pf.pt();
            } 
            else if (pf.fromPV() >= 2) 
            {
               if ( abs(pf.pdgId() )!=11 && abs(pf.pdgId())!=13 ){
               //cout << "pf iD ? " <<pf.pdgId() << endl;
               charged03 += pf.pt();}
               else {}
            } 
            else 
            {
               if (pf.pt() > 0.5) pileup03 += pf.pt();
            }
         }
         /// pf 04 ///
         if (deltaR(pf,*lep) < 0.4) 
         {
            //pfcandidate-based footprint removal
            if (std::find(footprint.begin(), footprint.end(), reco::CandidatePtr(pfs,i)) != footprint.end()) {continue;}
            if (pf.charge() == 0) 
            {
               if (pf.pt() > 0.5) neutral04 += pf.pt();
            } 
            else if (pf.fromPV() >= 2) 
            {
               if ( abs(pf.pdgId() ) != 11 && abs(pf.pdgId()) != 13 ){
               //cout << "pf iD ? " <<pf.pdgId() << endl;
               charged04 += pf.pt();}
               else {}
            } 
            else 
            {
               if (pf.pt() > 0.5) pileup04 += pf.pt();
            }
         }

      }

      //cout << neutral04 << "   " << charged04 << "   " << pileup04 <<endl;
      //////////////////////////
      /////// Muon Info. ///////
      //////////////////////////

      if (abs(lep->isMuon()) == true)
      {
         PFIsodbeta03_1 = -999.0;
         PFIsodbeta04_1 = -999.0;
         relIso03_1 = -999.0;

         relIso03_1 = isolation->MuonRelTrkIso( v_mus[muon_index_1]->isolationR03().sumPt, v_mus[muon_index_1]->pt() );

         PFIsodbeta03_1 = isolation->PFIsodBetaMini(charged03 , neutral03, pileup03, v_mus[muon_index_1]->pt(), 0.5 ); 
         PFIsodbeta04_1 = isolation->PFIsodBetaMini(charged04 , neutral04, pileup04, v_mus[muon_index_1]->pt(), 0.5 ); 

         ssbtreeManager->Fill( "Muon_relIso03_1"    , relIso03_1         );
         ssbtreeManager->Fill( "Muon_PFIsodBeta03_1", PFIsodbeta03_1     );
         ssbtreeManager->Fill( "Muon_PFIsodBeta04_1", PFIsodbeta04_1     );

         muon_index_1++;

      }

      ///////////////////////////////
      /////// Electron Info. ////////
      ///////////////////////////////

      if (lep->isElectron()==true)
      {

         elecs_PFIsodbeta03_ = -999.0;
         elecs_PFIsoRho03_ = -999.0;
         effA03_ = -999.0;

         effA03_ = ElectronEffectiveArea::GetElectronEffectiveArea(ElectronEffectiveArea::kEleGammaAndNeutralHadronIso03,
                                                                v_els[ele_index_1]->superCluster()->eta(), ElectronEffectiveArea::kEleEAData2012);
         elecs_PFIsoRho03_   = isolation->PFIsoRhoMini(charged03 , neutral03, rho, effA03_, v_els[ele_index_1]->pt() ); 
         //elecs_PFIsodbeta03_ = isolation->PFIsodBetaMini(charged03 , neutral03, pileup03, v_els[ele_index_1]->pt(), 1.0 ); 
         elecs_PFIsodbeta03_ = isolation->PFIsodBetaMini(charged03 , neutral03, pileup03, v_els[ele_index_1]->pt(), 0.5 ); 

         //ssbtreeManager->Fill( "Elec_PFIsodBeta03", elecs_PFIsodbeta03_ );
         ssbtreeManager->Fill( "Elec_PFIsoRho03"  , elecs_PFIsoRho03_   );      

         ele_index_1++;
      }
   }


   /////////////////////////
   /// Jets Information  ///
   /////////////////////////


   // Utility for Jet ID
   PFJetIDSelectionFunctor LooseJetID(pfLooseJetIDparam);
   pat::strbitset looseJetIdSel = LooseJetID.getBitTemplate();

   PFJetIDSelectionFunctor TightJetID(pfTightJetIDparam);
   pat::strbitset tightJetIdSel = TightJetID.getBitTemplate();

   jet_index = 0;
 
   Handle<JetCollection> jets;
   iEvent.getByLabel(jetTag, jets);

   for ( unsigned int i=0; i<jets->size(); ++i ) 
   {
      const pat::Jet & itJet = jets->at(i);

      ////////////////////////////////////
      /// selection of resaonable jets ///
      ////////////////////////////////////
      
      if ( itJet.pt() < 20.0 || abs( itJet.eta() ) > 2.5 ) {continue;} // import at python config

      jets_pt_ = -9999;
      jets_eta_ = -9999;
      jets_phi_ = -9999;
      jets_energy_ = -9999;
      jets_pdgid_ = 0;
      jets_isJet_ = false;
      jets_bDisc_ = -9999;
      jets_charge_ = -9999;
      jets_pfjetid_ = -999;
      jets_mvapujetid_ = -999;
      jets_mvapujet_ = -999;
      isLoosejetid_pass = false;
      isTightjetid_pass = false;


      ///For PFJetIDSelectionFunctor
      looseJetIdSel.set(false);
      isLoosejetid_pass = LooseJetID(itJet, looseJetIdSel);

      tightJetIdSel.set(false);
      isTightjetid_pass = TightJetID(itJet, tightJetIdSel);

      if (isTightjetid_pass)
      {
         jets_pfjetid_ = 2;
      }
      else if (isLoosejetid_pass)
      {
         jets_pfjetid_ = 1;
      }
      else 
      {
         jets_pfjetid_ = 0;
      }


      ////////////////////////////
      /// End of jet selection ///
      ////////////////////////////

      float mva   = -999;
          
      jets_pt_ = itJet.pt();
      jets_eta_ = itJet.eta();
      jets_phi_ = itJet.phi();
      jets_energy_ = itJet.energy();
      jets_charge_ = itJet.charge();

      /// works only for JPT or PF jet
      jets_mvapujet_ = mva;
      jets_pdgid_ = itJet.pdgId();
      jets_isJet_ = itJet.isJet();
      jets_bDisc_ = itJet.bDiscriminator(csvBJetTag);

      ssbtreeManager->Fill( "Jet", jets_pt_, jets_eta_, jets_phi_, jets_energy_, jet_index);
      ssbtreeManager->Fill( "Jet_Charge"   , jets_charge_     );
      ssbtreeManager->Fill( "Jet_isJet"    , jets_isJet_      );
      ssbtreeManager->Fill( "Jet_bDisc"    , jets_bDisc_      );
      ssbtreeManager->Fill( "Jet_PFId"     , jets_pfjetid_    );
      ssbtreeManager->Fill( "Jet_PileUpId" , jets_mvapujetid_ );
      ssbtreeManager->Fill( "Jet_PileUpMVA", jets_mvapujet_   );
      
  
      jet_index++;

   }
   ssbtreeManager->Fill( "Jet_Count", jet_index );

   ///////////////////////////////
   /////// MET Information ///////
   ///////////////////////////////
   MET_index=0;
   Handle<METCollection> met;
   iEvent.getByLabel( MetTag, met );
   for (METCollection::const_iterator itMet = met->begin() ; itMet != met->end(); itMet++)
   {
       ssbtreeManager->Fill( "MET" ,(*itMet).pt(), 0, (*itMet).phi(), 0, MET_index);
       MET_index++;
   } 

   /// Fill Ntuples at each event
   ssbtreeManager->FillNtuple();

#ifdef THIS_IS_AN_EVENT_EXAMPLE
   Handle<ExampleData> pIn;
   iEvent.getByLabel("example",pIn);
#endif
   
#ifdef THIS_IS_AN_EVENTSETUP_EXAMPLE
   ESHandle<SetupData> pSetup;
   iSetup.get<SetupRecord>().get(pSetup);
#endif
}


// ------------ method called once each job just before starting event loop  ------------
void 
SSBAnalyzer::beginJob()
{
   ssbtree = ssbfs->make<TTree>("SSBTree", "Tree for Physics Analyses at CMS");
   ssbtreeManager = new SSBTreeManager();
//   ssbtreeManager->book(ssbtree);
   ssbtreeManager->Book(ssbtree);


   /// Isolation calculation
   isolation = new SSBIsoCal(); 
/*
   /// PDF
   for (unsigned int k=1; k<=pdfSets.size(); k++) 
   {
      LHAPDF::initPDFSet(k, pdfSets[k-1]);
   }
*/
}

// ------------ method called once each job just after ending the event loop  ------------
void 
SSBAnalyzer::endJob() 
{
}

// ------------ method called when starting to processes a run  ------------
void 
SSBAnalyzer::beginRun(edm::Run const&, edm::EventSetup const&)
{
}

// ------------ method called when ending the processing of a run  ------------
void 
SSBAnalyzer::endRun(edm::Run const&, edm::EventSetup const&)
{
}

// ------------ method called when starting to processes a luminosity block  ------------
void 
SSBAnalyzer::beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
{
}

// ------------ method called when ending the processing of a luminosity block  ------------
void 
SSBAnalyzer::endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
{
}

// ------------ method fills 'descriptions' with the allowed parameters for the module  ------------
void
SSBAnalyzer::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
  //The following says we do not know what parameters are allowed so do no validation
  // Please change this to state exactly what you do use, even if it is no parameters
  edm::ParameterSetDescription desc;
  desc.setUnknown();
  descriptions.addDefault(desc);
}

//define this as a plug-in
DEFINE_FWK_MODULE(SSBAnalyzer);
